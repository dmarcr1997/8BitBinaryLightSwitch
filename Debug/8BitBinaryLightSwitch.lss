
8BitBinaryLightSwitch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073f  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000699  00000000  00000000  0000091b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c0  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001274  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d3  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000065  00000000  00000000  0000167b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  78:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setupPins>:

#include <avr/io.h>
#include <util/delay.h>

void setupPins() {
	DDRD |= 0b11111100;
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8c 6f       	ori	r24, 0xFC	; 252
  84:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(0b00000111);
  86:	84 b1       	in	r24, 0x04	; 4
  88:	88 7f       	andi	r24, 0xF8	; 248
  8a:	84 b9       	out	0x04, r24	; 4
  8c:	08 95       	ret

0000008e <main>:
}

int main(void)
{
	setupPins();
  8e:	0e 94 40 00 	call	0x80	; 0x80 <setupPins>
	uint8_t led_pattern;
	
    /* Replace with your application code */
    while (1) 
    {
		switchState = PINB & 0b00000111;
  92:	83 b1       	in	r24, 0x03	; 3
  94:	87 70       	andi	r24, 0x07	; 7
		
		switch(switchState) {
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	79 f0       	breq	.+30     	; 0xb8 <main+0x2a>
  9a:	28 f4       	brcc	.+10     	; 0xa6 <main+0x18>
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	a1 f0       	breq	.+40     	; 0xc8 <main+0x3a>
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	41 f0       	breq	.+16     	; 0xb4 <main+0x26>
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <main+0x22>
  a6:	85 30       	cpi	r24, 0x05	; 5
  a8:	59 f0       	breq	.+22     	; 0xc0 <main+0x32>
  aa:	40 f0       	brcs	.+16     	; 0xbc <main+0x2e>
  ac:	86 30       	cpi	r24, 0x06	; 6
  ae:	51 f0       	breq	.+20     	; 0xc4 <main+0x36>
			case 0:
				led_pattern = 0b00000000;
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	0b c0       	rjmp	.+22     	; 0xca <main+0x3c>
				break;
			case 1:
				led_pattern = (1 << PIND2);
				break;
			case 2:
				led_pattern = (1 << PIND3);
  b4:	28 e0       	ldi	r18, 0x08	; 8
				break;
  b6:	09 c0       	rjmp	.+18     	; 0xca <main+0x3c>
			case 3:
				led_pattern = (1 << PIND4);
  b8:	20 e1       	ldi	r18, 0x10	; 16
				break;
  ba:	07 c0       	rjmp	.+14     	; 0xca <main+0x3c>
			case 4:	
				led_pattern = (1 << PIND5);
  bc:	20 e2       	ldi	r18, 0x20	; 32
				break;
  be:	05 c0       	rjmp	.+10     	; 0xca <main+0x3c>
			case 5:
				led_pattern = (1 << PIND6);
  c0:	20 e4       	ldi	r18, 0x40	; 64
				break;
  c2:	03 c0       	rjmp	.+6      	; 0xca <main+0x3c>
			case 6:
				led_pattern = (1 << PIND7);
  c4:	20 e8       	ldi	r18, 0x80	; 128
				break;
  c6:	01 c0       	rjmp	.+2      	; 0xca <main+0x3c>
		switch(switchState) {
			case 0:
				led_pattern = 0b00000000;
				break;
			case 1:
				led_pattern = (1 << PIND2);
  c8:	24 e0       	ldi	r18, 0x04	; 4
				led_pattern = (1 << PIND7);
				break;
			default:
				led_pattern = 0b00000000;
		}
		PORTD &= 0b00000011;
  ca:	9b b1       	in	r25, 0x0b	; 11
  cc:	93 70       	andi	r25, 0x03	; 3
  ce:	9b b9       	out	0x0b, r25	; 11
		PORTD |= led_pattern;
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	82 2b       	or	r24, r18
  d4:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f e7       	ldi	r18, 0x7F	; 127
  d8:	88 e3       	ldi	r24, 0x38	; 56
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x4e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x58>
  e6:	00 00       	nop
  e8:	d4 cf       	rjmp	.-88     	; 0x92 <main+0x4>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
